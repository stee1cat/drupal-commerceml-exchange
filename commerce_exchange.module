<?php
/**
 * Copyright (c) 2017 Gennadiy Khatuntsev <e.steelcat@gmail.com>
 */

use CommerceExchange\EventHandler;
use CommerceExchange\Logger;
use CommerceExchange\Settings;
use stee1cat\CommerceMLExchange\Catalog\ImportService;
use stee1cat\CommerceMLExchange\CommerceMLExchange;
use stee1cat\CommerceMLExchange\Config;
use stee1cat\CommerceMLExchange\Event\Events;

require 'vendor/autoload.php';

function commerce_exchange_module($string = '') {
    return 'commerce_exchange' . $string;
}

function commerce_exchange_load_classes() {
    $pattern = __DIR__ . DIRECTORY_SEPARATOR . 'includes' . DIRECTORY_SEPARATOR . '*.php';

    foreach (glob($pattern) as $file) {
        $filename = pathinfo($file, PATHINFO_FILENAME);
        module_load_include('php', commerce_exchange_module(), 'includes' . DIRECTORY_SEPARATOR . $filename);
    }
}

function commerce_exchange_menu() {
    $items['1c_exchange'] = [
        'page callback' => commerce_exchange_module(),
        'access callback' => true,
        'type' => MENU_CALLBACK,
    ];

    $items['admin/commerce/config/commerce-exchange'] = [
        'title' => '1C Exchange settings',
        'description' => 'Configure 1C Exchange',
        'page callback' => 'drupal_get_form',
        'page arguments' => [commerce_exchange_module('_settings_form')],
        'access arguments' => ['configure ' . commerce_exchange_module()],
        'file' => commerce_exchange_module() . '.admin.php',
    ];

    $items['admin/commerce/config/commerce-exchange/batch-import'] = [
        'title' => '1C Exchange settings',
        'page callback' => 'commerce_exchange_batch_import',
        'access arguments' => ['configure ' . commerce_exchange_module()],
    ];

    return $items;
}

function commerce_exchange_permission() {
   return [
       'configure ' . commerce_exchange_module() => [
           'title' => t('Configure 1C Exchange'),
           'description' => t('Allows users to configure 1C Exchange settings for the store'),
           'restrict access' => true,
       ],
   ];
}

/**
 * @param Settings $settings
 *
 * @return Config
 */
function commerce_exchange_create_config(Settings $settings) {
    $tempDirectory = drupal_realpath($settings->getFilePath());

    return (new Config())
        ->setUsername($settings->getUsername())
        ->setPassword($settings->getPassword())
        ->setZipSupport(false)
        ->setLogPath($tempDirectory . DIRECTORY_SEPARATOR . 'logs')
        ->setUploadPath($tempDirectory . DIRECTORY_SEPARATOR . 'files');
}

function commerce_exchange() {
    @set_time_limit(0);
    commerce_exchange_load_classes();

    $settings = new Settings();
    $exchangeConfig = commerce_exchange_create_config($settings);

    try {
        $eventHandler = new EventHandler($settings);

        $exchange = new CommerceMLExchange($exchangeConfig);

        $exchange->subscribe(Events::ON_IMPORT, [$eventHandler, 'onImport']);
        $exchange->subscribe(Events::ON_DEACTIVATE, [$eventHandler, 'onDeactivate']);
        $exchange->subscribe(Events::ON_COMPLETE, [$eventHandler, 'onComplete']);

        $exchange->start();
    }
    catch (\Exception $e) {
        Logger::exception($e);
    }

    drupal_exit();
}

function commerce_exchange_batch_import() {
    @set_time_limit(0);
    commerce_exchange_load_classes();

    $settings = new Settings();
    $exchangeConfig = commerce_exchange_create_config($settings);
    $pattern = $exchangeConfig->getUploadPath() . DIRECTORY_SEPARATOR . '*.xml';

    try {
        $eventHandler = new EventHandler($settings);

        $exchange = new CommerceMLExchange($exchangeConfig);
        $exchange->subscribe(Events::ON_IMPORT, [$eventHandler, 'onImport']);

        /** @var ImportService $importService */
        $importService = $exchange->getContainer()
            ->get(ImportService::class);

        foreach (glob($pattern) as $file) {
            $importService->import($file);

            Logger::info('File "%filename" imported', [
                '%filename' => basename($file),
            ]);
        }
    }
    catch (\Exception $e) {
        Logger::exception($e);
    }

    drupal_exit();
}